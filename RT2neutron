#!/usr/bin/env python

from __future__ import annotations

from enum import Enum
from typing import Callable
from copy import deepcopy

import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm

from rt2.neutron import LibraryFactory
from rt2.prompt import Interactive
from rt2.material import AtomList, pidToName
from rt2.endf import REACTION_TYPE, SECONDARY_TYPE


class PLOTTER_STATE(Enum):
    IDLE          = 0
    CROSS_SECTION = 1
    ENERGY_DIST   = 2
    ANGULAR_DIST  = 3
    MULTIPLICITY  = 4


class LegendSegment:
    def __init__(self):
        self.library = None
        self.za      = None
        self.isomer  = None
        self.temp    = None
        self.sab     = None
        self.mt      = None
        self.mf      = None
        self.energy  = None


class PlotterLegend:
    def __init__(self):
        self._legend_list = []

    def _commonElement(self, lf: Callable):
        items = list(map(lf, self._legend_list))
        if all([x == items[0] for x in items]):
            return items[0]
        else:
            return False

    def _getTitleAndlegendsSegments(self, title_postfix: str, legends: list, f_extract: Callable, f_format: Callable):
        item_common = self._commonElement(f_extract)
        if item_common is not None:
            if item_common:
                title_postfix += '{}'.format(f_format(item_common))
            else:
                for i in range(len(self._legend_list)):
                    item = f_extract(self._legend_list[i])
                    legends[i] += '{}'.format(f_format(item))
        return title_postfix

    def append(self, seg: LegendSegment):
        self._legend_list += [seg]

    def clear(self):
        self._legend_list = []

    def getTitleAndlegends(self, title_prefix: str) -> (str, list):
        title   = '{}'.format(title_prefix)
        legends = [''] * len(self._legend_list)

        title_postfix = ''

        # library
        title_postfix = self._getTitleAndlegendsSegments(
            title_postfix, legends,
            lambda x: x.library,
            lambda item: '{} '.format(item)
        )

        # za
        title_postfix = self._getTitleAndlegendsSegments(
            title_postfix, legends,
            lambda x: x.za,
            lambda item: '{}-{} '.format(AtomList.symbol(item // 1000), item  % 1000)
        )

        # isomer
        title_postfix = self._getTitleAndlegendsSegments(
            title_postfix, legends,
            lambda x: x.isomer,
            lambda item: 'm{} '.format(item) if item else ''
        )

        # temperature
        title_postfix = self._getTitleAndlegendsSegments(
            title_postfix, legends,
            lambda x: x.temp,
            lambda item: '{}K '.format(int(item))
        )

        # sab table
        title_postfix = self._getTitleAndlegendsSegments(
            title_postfix, legends,
            lambda x: x.sab,
            lambda item: 'S(a,b)={} '.format(item) if item else ''
        )

        # mt
        title_postfix = self._getTitleAndlegendsSegments(
            title_postfix, legends,
            lambda x: x.mt,
            lambda item: ' {}'.format(REACTION_TYPE[item])
        )

        # mf
        title_postfix = self._getTitleAndlegendsSegments(
            title_postfix, legends,
            lambda x: x.mf,
            lambda item: '{} '.format(SECONDARY_TYPE[item])
        )

        # energy
        title_postfix = self._getTitleAndlegendsSegments(
            title_postfix, legends,
            lambda x: x.energy,
            lambda item: ' E={:.3e} MeV'.format(item)
        )

        if title_postfix:
            title += ' for {}'.format(title_postfix)
        return title, legends


PLOTTER        = PLOTTER_STATE.IDLE
LEGEND_HANDLER = PlotterLegend()


def printHelp():
    print("Functions: [exit]             : Exit RT2neutron program                                  ")
    print("           [help]             : Print this message                                       ")
    print("           [library_list]     : Get the list of available neutron library                ")
    print("           [set_library]      : Switch the neutron library                               ")
    print("           [data_list]        : Get the list of avaliable ENDF data from current library ")
    print("           [set_target]       : Set the current target nucleus for plotting and sampling ")
    print("           [current_target]   : Print target information and possible channels           ")
    print("           [branch]           : Print channel selection probability                      ")
    print("           [sample]           : Sample secondaries                                       ")
    print("           [plot_xs]          : Add graph of neutron cross-section of the current target ")
    print("           [plot_energy]      : Add graph of secondary energy spectrum of entered MT     ")
    print("           [plot_angle]       : Add graph of secondary angular distribution of entered MT")
    print("           [plot_multiplicity]: Add graph of photon multiplicity of entered MT           ")
    print("           [draw_plot]        : Draw all added graphs                                    ")


def printLibraryList():
    lib_list    = LibraryFactory.getLibraryList()
    current_lib = LibraryFactory.currentLibrary()

    fm = "{} {:<16}"
    for lib in lib_list:
        picked = '*' if lib == current_lib else ' '
        print(fm.format(picked, lib))
    return


def setLibrary():
    def printHelpSub():
        print("Parameters: --lib     | -l  <str>         Library name                        ")
        print("            --help    | -h                Print this message                  ")
    argv = Interactive.prompt()['--help', '-h']
    if argv is not None:
        printHelpSub()
        return

    argv = Interactive.prompt()['--lib', '-l']
    if not argv:
        print('[ERROR] Library must be specified')
        printHelpSub()
        return

    LibraryFactory.setLibrary(argv[0])


def printDataList():
    def printHelpSub():
        print("Parameters: --atom    | -z  <int>         Target atomic number                ")
        print("            --help    | -h                Print this message                  ")
    argv = Interactive.prompt()['--help', '-h']
    if argv is not None:
        printHelpSub()
        return

    argv = Interactive.prompt(1)['--atom', '-z']
    z    = -1
    if argv:
        z = int(argv[0])

    fm       = "{:<18} {:<6} {:<6} {:<12} {:<14}"
    print(fm.format('Isotope', 'ZA', 'Isomer', 'Temperature', 'S(a,b)'))
    for za, isomer, temperature, identifier, _ in LibraryFactory.getDataList(z):
        z = za // 1000
        a = za  % 1000
        str_isotope = '{}-{}'.format(AtomList.name(z), a)
        str_isomer  = ' ' if isomer == 0 else 'm{}'.format(isomer)
        str_temp    = '{} K'.format(int(temperature))
        print(fm.format(str_isotope, za, str_isomer, str_temp, identifier))
    return


def setTargetIsotope():
    def printHelpSub():
        print("Parameters: --za           | -za  <int>        Target atom's ZA number              ")
        print("            --isomer       | -i   <int>        Target atom's isomeric state         ")
        print("            --temperature  | -t   <int>        Temperature                          ")
        print("            --sab          | -s   <str>        Identifier of S(a,b) scattering table")
        print("            --help         | -h                Print this message                   ")
    argv = Interactive.prompt()['--help', '-h']
    if argv is not None:
        printHelpSub()
        return

    argv = Interactive.prompt()['--za', '-za']
    if not argv:
        print('[ERROR] ZA value must be specified')
        printHelpSub()
        return
    za = int(argv[0])

    argv   = Interactive.prompt()['--isomer', '-i']
    isomer = 0
    if argv:
        isomer = int(argv[0])

    argv = Interactive.prompt()['--temperature', '-t']
    temp = 294
    if argv:
        temp = int(argv[0])

    argv = Interactive.prompt()['--sab', '-s']
    sab  = ''
    if argv:
        sab = argv[0]

    LibraryFactory.choose(za, isomer, temp, sab)


def printCurrentTarget():
    za, isomer, temperature, sab = LibraryFactory.getCurrentKey()
    z = za // 1000
    a = za % 1000
    str_isotope = '{}-{}'.format(AtomList.name(z), a)
    print("[{}]".format(str_isotope))
    print("Library    : {}".format(LibraryFactory.currentLibrary()))
    print("ZA         : {}".format(za))
    print("Isomer     : {}".format(isomer))
    print("Temperature: {} K".format(temperature))
    print("S(a,b)     : {}".format(sab))
    print("")
    print("[Reactions]")
    lib = LibraryFactory.getCurrentData()
    egn = lib.neutronGroupStructure()
    mt_list = lib.keys()
    fm = "{:<3} {:<10} {:<16} {:<6}"

    print(fm.format('MT', 'Desc', 'Threshold [MeV]', 'Group'))
    for mt in mt_list:
        xs    = lib[mt].xs()
        group = np.argmax(xs > 0)
        floor = egn[group]
        floor = '{:.3f}'.format(floor) if floor > .01 else '{:.3e}'.format(floor)
        print(fm.format(mt, REACTION_TYPE[mt], floor, group))
    print("")


def printBranch():
    def printHelpSub():
        print("            --energy  | -e   <float>      Energy of incident neutron [MeV]    ")
        print("            --help    | -h                Print this message                  ")
    argv = Interactive.prompt()['--help', '-h']
    if argv is not None:
        printHelpSub()
        return

    lib = LibraryFactory.getCurrentData()

    argv = Interactive.prompt()['--energy', '-e']
    if not argv:
        print('[ERROR] energy value must be specified')
        printHelpSub()
        return
    energy = float(argv[0])
    group = lib.getGroupFromEnergy(energy)

    table = '{:>10} {:>14}'

    za, isomer, temperature, sab = LibraryFactory.getCurrentKey()
    z = za // 1000
    a = za % 1000
    str_isotope = '{}-{}'.format(AtomList.name(z), a)
    print('Sampling branch ratio of [{}] at group {}'.format(str_isotope, group))
    print(table.format('Channel', 'Ratio [%]'))
    br_list = lib.branch(group)
    for mt in lib.keys():
        br     = br_list[mt] * 100.0
        br_str = '{:.3}'.format(br) if br > 0.1 or br == 0.0 else '{:.3e}'.format(br)
        print(table.format(lib[mt].__repr__(), br_str))


def sampleCurrentTarget():
    def printHelpSub():
        print("            --mt      | -mt  <int>        MT value to sample secondaries      ")
        print("            --energy  | -e   <float>      Energy of incident neutron [MeV]    ")
        print("            --help    | -h                Print this message                  ")
    argv = Interactive.prompt()['--help', '-h']
    if argv is not None:
        printHelpSub()
        return

    lib = LibraryFactory.getCurrentData()

    argv = Interactive.prompt()['--energy', '-e']
    if not argv:
        print('[ERROR] energy value must be specified')
        printHelpSub()
        return
    energy = float(argv[0])
    group  = lib.getGroupFromEnergy(energy)

    argv = Interactive.prompt()['--mt', '-mt']
    mt   = 0
    if argv:
        mt = int(argv[0])

    if not mt:
        branch = lib.sample(group)
    else:
        branch = lib[mt]

    res_za = branch.resZA()
    res_z  = res_za // 1000
    res_a  = res_za %  1000

    if not res_za:
        remnant = 'None'
    else:
        remnant = '{}-{}'.format(AtomList.symbol(res_z), res_a)

    print('{} channel (MT={}) is selected'.format(branch, branch.mt()))
    print('Local energy depo   : {:.5} MeV'.format(branch.deposition(group)))
    print('Local target remnant: {}'.format(remnant))
    print('List of secondaries:')
    table = '{:>8} {:>14} {:>14}'
    print(table.format('Type', 'Energy [MeV]', 'Angle [Degree]'))
    for sec in branch.sample(group):
        name   = pidToName(sec['pid'])
        energy = '{:.4e}'.format(sec['e'])
        angle  = '{:.3}'.format(np.arccos(sec['w']) * 180 / np.pi)
        print(table.format(name, energy, angle))

    return


def checkIntegrity():
    def printHelpSub():
        print("            --all     | -a                Test all isotopes in the current library")
        print("            --help    | -h                Print this message                      ")
    argv = Interactive.prompt()['--help', '-h']
    if argv is not None:
        printHelpSub()
        return

    argv = Interactive.prompt()['-all', '-a']
    if argv is not None:  # loop all
        LibraryFactory.clear()
        pbar = tqdm(LibraryFactory.getDataList())
        for item in pbar:
            pbar.set_description('{:<30}'.format(item[-1])[:30])
            LibraryFactory.choose(*item[:-1])
            lib = LibraryFactory.getCurrentData()
            if not lib.checkIntegrity():
                pbar.write("Problem detected in file '{}'".format(item[-1]))
    else:
        lib = LibraryFactory.getCurrentData()
        if not lib.checkIntegrity(True):
            print("Problem detected")
        else:
            print("OK")


def plotCrossSection(legend: PlotterLegend):
    def printHelpSub():
        print("            --mt      | -mt  <int>        MT value to draw cross-section      ")
        print("            --help    | -h                Print this message                  ")
    argv = Interactive.prompt()['--help', '-h']
    if argv is not None:
        printHelpSub()
        return

    za, isomer, temperature, sab = LibraryFactory.getCurrentKey()

    library = LibraryFactory.currentLibrary()
    data    = LibraryFactory.getCurrentData()
    mt_list = data.keys()

    legend_proto = LegendSegment()
    legend_proto.library = library
    legend_proto.za      = za
    legend_proto.isomer  = isomer
    legend_proto.temp    = temperature
    legend_proto.sab     = sab

    argv = Interactive.prompt()['--mt', '-mt']
    mt   = 0
    if argv:
        mt = int(argv[0])

    egn      = data.neutronGroupStructure()
    xs_total = np.zeros(len(egn) - 1, dtype=float)

    if mt in (0, 1):  # prepare total XS
        for mt_seg in mt_list:
            xs_total += data[mt_seg].xs()
        xs_total = np.append(xs_total[0], xs_total)

    if mt == 0:
        plt.step(egn, xs_total)
        legend_seg    = deepcopy(legend_proto)
        legend_seg.mt = 1
        legend.append(legend_seg)
        for mt_seg in mt_list:
            xs = data[mt_seg].xs()
            xs = np.append(xs[0], xs)
            plt.step(egn, xs)
            legend_seg    = deepcopy(legend_proto)
            legend_seg.mt = mt_seg
            legend.append(legend_seg)
    elif mt == 1:
        plt.step(egn, xs_total)
        legend_seg    = deepcopy(legend_proto)
        legend_seg.mt = mt
        legend.append(legend_seg)
    else:
        assert mt in mt_list, '[ERROR] reaction MT={} not exist in current target'.format(mt)
        xs = data[mt].xs()
        xs = np.append(xs[0], xs)
        plt.step(egn, xs)
        legend_seg    = deepcopy(legend_proto)
        legend_seg.mt = mt
        legend.append(legend_seg)


def plotTransition(legend_handler: PlotterLegend):
    def printHelpSub():
        print("            --mt      | -mt  <int>        MT value to draw transition            ")
        print("            --mf      | -mf  <int>        MF value (secondary) to draw transition")
        print("            --energy  | -e <float>        Kinetic energy of incident neutron     ")
        print("            --help    | -h                Print this message                     ")
    argv = Interactive.prompt()['--help', '-h']
    if argv is not None:
        printHelpSub()
        return

    za, isomer, temperature, sab = LibraryFactory.getCurrentKey()

    library = LibraryFactory.currentLibrary()
    data    = LibraryFactory.getCurrentData()
    mt_list = data.keys()

    argv = Interactive.prompt()['--mt', '-mt']
    if argv:
        mt = int(argv[0])
    else:
        print('[ERROR] MT value must be specified')
        printHelpSub()
        return

    assert mt in mt_list, '[ERROR] reaction MT={} not exist in current target'.format(mt)

    legend_proto = LegendSegment()
    legend_proto.library = library
    legend_proto.za      = za
    legend_proto.isomer  = isomer
    legend_proto.temp    = temperature
    legend_proto.sab     = sab
    legend_proto.mt      = mt

    argv = Interactive.prompt()['--mf', '-mf']
    mf   = 0
    if argv:
        mf = int(argv[0])

    argv = Interactive.prompt()['--energy', '-e']
    if not argv:
        print('[ERROR] energy value must be specified')
        printHelpSub()
        return
    energy = float(argv[0])
    group  = data.getGroupFromEnergy(energy)

    egn = data.neutronGroupStructure()
    egg = data.gammaGroupStructure()

    mf_list, _ = data[mt].instruction(group)
    mf_list = np.unique(mf_list)

    if mf == 0:
        for mf_this in mf_list:
            trans = data[mt].transition(group, mf_this, True)
            trans = np.append(trans[0], trans)
            plt.step(egg if mf_this == 16 else egn, trans)
            legend_seg = deepcopy(legend_proto)
            legend_seg.mf     = mf_this
            legend_seg.energy = energy
            legend_handler.append(legend_seg)
    else:
        trans = data[mt].transition(group, mf, True)
        trans = np.append(trans[0], trans)
        plt.step(egg if mf == 16 else egn, trans)
        legend_seg        = deepcopy(legend_proto)
        legend_seg.mf     = mf
        legend_seg.energy = energy
        legend_handler.append(legend_seg)


def plotAngularDistribution(legend_handler: PlotterLegend):
    def printHelpSub():
        print("            --mt      | -mt  <int>        MT value to draw distribution            ")
        print("            --mf      | -mf  <int>        MF value (secondary) to draw distribution")
        print("            --energy  | -e <float>        Kinetic energy of incident neutron       ")
        print("            --help    | -h                Print this message                       ")
    argv = Interactive.prompt()['--help', '-h']
    if argv is not None:
        printHelpSub()
        return

    za, isomer, temperature, sab = LibraryFactory.getCurrentKey()

    library = LibraryFactory.currentLibrary()
    data    = LibraryFactory.getCurrentData()
    mt_list = data.keys()

    argv = Interactive.prompt()['--mt', '-mt']
    if argv:
        mt = int(argv[0])
    else:
        print('[ERROR] MT value must be specified')
        printHelpSub()
        return

    assert mt in mt_list, '[ERROR] reaction MT={} not exist in current target'.format(mt)

    legend_proto = LegendSegment()
    legend_proto.library = library
    legend_proto.za      = za
    legend_proto.isomer  = isomer
    legend_proto.temp    = temperature
    legend_proto.sab     = sab
    legend_proto.mt      = mt

    argv = Interactive.prompt()['--mf', '-mf']
    mf   = 0
    if argv:
        mf = int(argv[0])

    argv = Interactive.prompt()['--energy', '-e']
    if not argv:
        print('[ERROR] energy value must be specified')
        printHelpSub()
        return

    energy = float(argv[0])
    group  = data.getGroupFromEnergy(energy)

    mf_list, _ = data[mt].instruction(group)
    mf_list = np.unique(mf_list)
        
    if mf == 0:
        for mf_this in mf_list:
            eabin, eadist = data[mt].angularDistribution(group, mf_this)
            # normalize
            eadist /= (eabin[1:] - eabin[:-1]) * np.pi * 2
            eadist  = np.append(eadist[0], eadist)
            plt.step(eabin, eadist)
            legend_seg = deepcopy(legend_proto)
            legend_seg.mf     = mf_this
            legend_seg.energy = energy
            legend_handler.append(legend_seg)
    else:
        eabin, eadist = data[mt].angularDistribution(group, mf)
        # normalize
        eadist /= (eabin[1:] - eabin[:-1]) * np.pi * 2
        eadist  = np.append(eadist[0], eadist)
        plt.step(eabin, eadist)
        legend_seg        = deepcopy(legend_proto)
        legend_seg.mf     = mf
        legend_seg.energy = energy
        legend_handler.append(legend_seg)


def plotMultiplicity(legend_handler: PlotterLegend):
    def printHelpSub():
        print("            --mt      | -mt  <int>        MT value to draw distribution            ")
        print("            --help    | -h                Print this message                       ")
    argv = Interactive.prompt()['--help', '-h']
    if argv is not None:
        printHelpSub()
        return

    za, isomer, temperature, sab = LibraryFactory.getCurrentKey()

    library = LibraryFactory.currentLibrary()
    data    = LibraryFactory.getCurrentData()
    mt_list = data.keys()

    argv = Interactive.prompt()['--mt', '-mt']
    if argv:
        mt = int(argv[0])
    else:
        print('[ERROR] MT value must be specified')
        printHelpSub()
        return

    legend_proto = LegendSegment()
    legend_proto.library = library
    legend_proto.za      = za
    legend_proto.isomer  = isomer
    legend_proto.temp    = temperature
    legend_proto.sab     = sab
    legend_proto.mt      = mt

    assert mt in mt_list, '[ERROR] reaction MT={} not exist in current target'.format(mt)

    egn = data.neutronGroupStructure()

    multi = data[mt].multiplicity()
    multi = np.append(multi[0], multi)
    plt.step(egn, multi)
    legend_seg = deepcopy(legend_proto)
    legend_handler.append(legend_seg)


def drawPlotter(pstate: PLOTTER_STATE, legend_handler: PlotterLegend):
    if len(plt.gcf().get_children()) <= 1:
        print('[WARNING] plotter is empty')
        return
    if pstate == PLOTTER_STATE.CROSS_SECTION:
        __drawPlotterXS(legend_handler)
    elif pstate == PLOTTER_STATE.ENERGY_DIST:
        __drawPlotterTrans(legend_handler)
    elif pstate == PLOTTER_STATE.ANGULAR_DIST:
        __drawPlotterAngular(legend_handler)
    elif pstate == PLOTTER_STATE.MULTIPLICITY:
        __drawPlotterMultiplicity(legend_handler)
    elif pstate == PLOTTER_STATE.IDLE:
        print('[WARNING] plotter is empty')


def __drawPlotterXS(legend_handler: PlotterLegend):
    plt.xscale('log')
    plt.yscale('log')
    title, legends = legend_handler.getTitleAndlegends('Neutron Cross-Section [MF=3]')
    plt.legend(legends)
    plt.title(title)
    plt.xlabel('Energy [MeV]')
    plt.ylabel('Cross-Section [b]')
    plt.show()


def __drawPlotterTrans(legend_handler: PlotterLegend):
    plt.xscale('log')
    plt.yscale('log')
    title, legends = legend_handler.getTitleAndlegends('Energy Distribution [MF=4 or MF=6]')
    plt.legend(legends)
    plt.title(title)
    plt.xlabel('Secondary Energy [MeV]')
    plt.ylabel('Probability [1/MeV]')
    plt.show()


def __drawPlotterAngular(legend_handler: PlotterLegend):
    title, legends = legend_handler.getTitleAndlegends('Angular Distribution [MF=5 or MF=6]')
    plt.legend(legends)
    plt.title(title)
    plt.xlabel('Secondary Direction Cosine [mu]')
    plt.ylabel('Probability [1/sr]')
    plt.show()


def __drawPlotterMultiplicity(legend_handler: PlotterLegend):
    title, legends = legend_handler.getTitleAndlegends('Photon Multiplicity [MF=16]')
    plt.legend(legends)
    plt.title(title)
    plt.xscale('log')
    plt.xlabel('Energy [MeV]')
    plt.ylabel('Yield per Reaction')
    plt.show()


while True:
    function = Interactive.wait()
    try:
        if function.isspace() or not function:
            continue
        elif function == 'exit':
            break
        elif function == 'help':
            printHelp()
        elif function == 'library_list':
            printLibraryList()
        elif function == 'set_library':
            setLibrary()
        elif function == 'data_list':
            printDataList()
        elif function == 'set_target':
            setTargetIsotope()
        elif function == 'current_target':
            printCurrentTarget()
        elif function == 'branch':
            printBranch()
        elif function == 'sample':
            sampleCurrentTarget()
        elif function == 'integrity':
            checkIntegrity()
        elif function == 'plot_xs':
            if PLOTTER not in (PLOTTER_STATE.IDLE, PLOTTER_STATE.CROSS_SECTION):
                print('[WARNING] Plotter encountered different type. Previous graph is destroyed')
                LEGEND_HANDLER.clear()
                plt.clf()
            PLOTTER = PLOTTER_STATE.CROSS_SECTION
            plotCrossSection(LEGEND_HANDLER)
        elif function == 'plot_energy':
            if PLOTTER not in (PLOTTER_STATE.IDLE, PLOTTER_STATE.ENERGY_DIST):
                print('[WARNING] Plotter encountered different type. Previous graph is destroyed')
                LEGEND_HANDLER.clear()
                plt.clf()
            PLOTTER = PLOTTER_STATE.ENERGY_DIST
            plotTransition(LEGEND_HANDLER)
        elif function == 'plot_angle':
            if PLOTTER not in (PLOTTER_STATE.IDLE, PLOTTER_STATE.ANGULAR_DIST):
                print('[WARNING] Plotter encountered different type. Previous graph is destroyed')
                LEGEND_HANDLER.clear()
                plt.clf()
            PLOTTER = PLOTTER_STATE.ANGULAR_DIST
            plotAngularDistribution(LEGEND_HANDLER)
        elif function == 'plot_multiplicity':
            if PLOTTER not in (PLOTTER_STATE.IDLE, PLOTTER_STATE.MULTIPLICITY):
                print('[WARNING] Plotter encountered different type. Previous graph is destroyed')
                LEGEND_HANDLER.clear()
                plt.clf()
            PLOTTER = PLOTTER_STATE.MULTIPLICITY
            plotMultiplicity(LEGEND_HANDLER)
        elif function == 'draw_plot':
            drawPlotter(PLOTTER, LEGEND_HANDLER)
            PLOTTER = PLOTTER_STATE.IDLE
            LEGEND_HANDLER.clear()
        else:
            print('Function "{}" not found'.format(function))
            printHelp()
    except Exception as e:
        print(e)
